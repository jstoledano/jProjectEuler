package jProjectEulerLib;

import commons.Math;
import commons.Text;

public class Level001 {
	
	// commons.Math math = new commons.Math();
	
	public long problem001(int limit) {
		long  sum = 0;
		
		for (int i = 0; i < limit; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				sum += i;
			}
		}
		
		return sum;
	}
	
	public int problem002(int limit) {
		/*
		 * Even Fibonacci Numbers
		 * Problem 002
		 * 
		 * Each new term in the Fibonacci sequence is generated by
		 * adding the previous two terms. By starting with 1 and
		 * 2, the first 10 terms will be:
		 * 
		 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		 * 
		 * By considering the terms in the Fibonacci sequence
		 * whose values do not exceed four million, find the sum
		 * of the even-valued terms.
		 * 
		 */
		
		int sum = 0;
		int a = 1;
		int b = 1;
		
		while (b < limit) {
			if (b % 2 == 0) {
				sum += b;
			}
			int h = a + b;
			a = b; b = h;
		}
		return sum;
	}
	
	public long problem003(long number) {
		/*
		 * Largest Prime Factor
		 * Problem 003
		 * 
		 * The prime factors of 13_195 are 5, 7, 13 and 29.
		 * What is the largest prime factor of the number 600_851_475_143?
		 * 
		 */
		long largestFactor = 2L;
		
		if (Math.IsPrime(number)) {
			return number;
		}
		
		for (long divisor = 3; divisor * divisor <= number; divisor += 2) {
			if (number % divisor == 0) {
				largestFactor = divisor;
				number /= divisor;
			}
		}
		
		if (number > largestFactor)
			largestFactor = number;
		
		return largestFactor;
	}
	
	public int problem003 (int number) {
		int largestFactor = 2;
		if (Math.IsPrime(number)) return number;
		for (int divisor=3; divisor*divisor<=number; divisor+=2) {
			if (number%divisor==0) {
				largestFactor = divisor; 
				number /= divisor;
			}
		}
		if (number > largestFactor) largestFactor = number;
		return largestFactor;
	}
	
	
	/*
	 * Largest Palindrome Product
	 * Problem 4
	 * 
	 * A palindromic number reads the same both ways. 
	 * The largest palindrome made from the product of two
	 * 2-digit numbers is 9009 = 91 x 99.
	 * 
	 * Find the largest palindrome made from the product of 
	 * two 3-digit numbers.
	 * 
	 */
	public int problem004(int base) {
		int palindrome = 0;
		int min = Math.log10(base - 1);
		int max = Math.log10(base);
		
		
		for (int i = min; i < max; i++) {
			for (int j = min; j < max; j++ ) {
				int res = i * j;
				int rev = Integer.parseInt(Text.reverseNumber(res));
				
				if (res == rev && res > palindrome) palindrome = res;	
			}
		}
		return palindrome;
	}

	public long problem005(int max) {
		/* Smallest Multiple
		 *
		 * 2520  is the smallest number that can be divided by each of
		 * the numbers from 1 to 10 without any remainder.
		 * What is the smallest positive number that is evenly divisible
		 * by all of the numbers from 1 to 20?
		 */
		long small = 1;

		for (long k = 1; k < max; k++) {
			if (small % k > 0) {
				for (long j = 1; j < max; j++) {
					if ((small * j) % k == 0) {
						small *= j;
						break;
					}
				}
			}
		}

		return small;
	}

	public long problem006(int size) {
		/* Sum Square Difference
		 * The sum of the squares of the first ten natural numbers is,
		 *      1^2 + 2^2 + ... + 10^2 = 385
		 * The square of the sum of the first ten natural numbers is,
		 *   (1 + 2 + ... + 10)^2 = 55^2 = 3_025
         * Hence the difference between the sum of the squares of the first
         * ten natural numbers and the square of the sum is 3025 - 385 = 2640.
         *
         * Find the difference between the sum of the squares of the first one hundred
         * natural numbers and the square of the sum.
		 */

		long sum_of_the_squares = 0;
		long square_of_the_sum;
		long sums = 0;

		for (int i = 1; i <= size; i++) {
			sum_of_the_squares += ((long) i * i);
			sums += i;
		}
		square_of_the_sum = sums * sums;

		return square_of_the_sum - sum_of_the_squares;
	}

}
