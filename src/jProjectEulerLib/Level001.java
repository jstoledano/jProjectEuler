package jProjectEulerLib;

import commons.Math;
import commons.Text;

import static java.lang.String.*;

public class Level001 {
	
	// commons.Math math = new commons.Math();
	
	public long problem001(int limit) {
		long  sum = 0;
		
		for (int i = 0; i < limit; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				sum += i;
			}
		}
		
		return sum;
	}
	
	public int problem002(int limit) {
		/*
		 * Even Fibonacci Numbers
		 * Problem 002
		 * 
		 * Each new term in the Fibonacci sequence is generated by
		 * adding the previous two terms. By starting with 1 and
		 * 2, the first 10 terms will be:
		 * 
		 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		 * 
		 * By considering the terms in the Fibonacci sequence
		 * whose values do not exceed four million, find the sum
		 * of the even-valued terms.
		 * 
		 */
		
		int sum = 0;
		int a = 1;
		int b = 1;
		
		while (b < limit) {
			if (b % 2 == 0) {
				sum += b;
			}
			int h = a + b;
			a = b; b = h;
		}
		return sum;
	}
	
	public long problem003(long number) {
		/*
		 * Largest Prime Factor
		 * Problem 003
		 * 
		 * The prime factors of 13_195 are 5, 7, 13 and 29.
		 * What is the largest prime factor of the number 600_851_475_143?
		 * 
		 */
		long largestFactor = 2L;
		
		if (Math.IsPrime(number)) {
			return number;
		}
		
		for (long divisor = 3; divisor * divisor <= number; divisor += 2) {
			if (number % divisor == 0) {
				largestFactor = divisor;
				number /= divisor;
			}
		}
		
		if (number > largestFactor)
			largestFactor = number;
		
		return largestFactor;
	}
	
	public int problem003 (int number) {
		int largestFactor = 2;
		if (Math.IsPrime(number)) return number;
		for (int divisor=3; divisor*divisor<=number; divisor+=2) {
			if (number%divisor==0) {
				largestFactor = divisor; 
				number /= divisor;
			}
		}
		if (number > largestFactor) largestFactor = number;
		return largestFactor;
	}
	
	
	/*
	 * Largest Palindrome Product
	 * Problem 4
	 * 
	 * A palindromic number reads the same both ways. 
	 * The largest palindrome made from the product of two
	 * 2-digit numbers is 9009 = 91 x 99.
	 * 
	 * Find the largest palindrome made from the product of 
	 * two 3-digit numbers.
	 * 
	 */
	public int problem004(int base) {
		int palindrome = 0;
		int min = Math.log10(base - 1);
		int max = Math.log10(base);
		
		
		for (int i = min; i < max; i++) {
			for (int j = min; j < max; j++ ) {
				int res = i * j;
				int rev = Integer.parseInt(Text.reverseNumber(res));
				
				if (res == rev && res > palindrome) palindrome = res;	
			}
		}
		return palindrome;
	}

	public long problem005(int max) {
		/* Smallest Multiple
		 *
		 * 2520  is the smallest number that can be divided by each of
		 * the numbers from 1 to 10 without any remainder.
		 * What is the smallest positive number that is evenly divisible
		 * by all of the numbers from 1 to 20?
		 */
		long small = 1;

		for (long k = 1; k < max; k++) {
			if (small % k > 0) {
				for (long j = 1; j < max; j++) {
					if ((small * j) % k == 0) {
						small *= j;
						break;
					}
				}
			}
		}

		return small;
	}

	public long problem006(int size) {
		/* Sum Square Difference
		 * The sum of the squares of the first ten natural numbers is,
		 *      1^2 + 2^2 + ... + 10^2 = 385
		 * The square of the sum of the first ten natural numbers is,
		 *   (1 + 2 + ... + 10)^2 = 55^2 = 3_025
         * Hence the difference between the sum of the squares of the first
         * ten natural numbers and the square of the sum is 3025 - 385 = 2640.
         *
         * Find the difference between the sum of the squares of the first one hundred
         * natural numbers and the square of the sum.
		 */

		long sum_of_the_squares = 0;
		long square_of_the_sum;
		long sums = 0;

		for (int i = 1; i <= size; i++) {
			sum_of_the_squares += ((long) i * i);
			sums += i;
		}
		square_of_the_sum = sums * sums;

		return square_of_the_sum - sum_of_the_squares;
	}

	public long problem007(int n) {
		/* 10001st Prime
		 * Problem 7
		 *
		 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
		 * we can see that the 6th prime is 13.
		 *
		 * What is the 10_001st prime number?
		 */
		int count = 1;
		int number = 1;

		while (count < n) {
			number += 2;
			if (Math.IsPrime(number)) {
				count++;
			}
		}
		return number;
	}

	public long problem008(int size) {
		/* *** Problem 008 - Largest Product in a Series
		 * The four adjacent digits in the -digit number that have the greatest
		 * product are 9 x 9 x 8 x 9 = 5832.

					73167176531330624919225119674426574742355349194934
					96983520312774506326239578318016984801869478851843
					85861560789112949495459501737958331952853208805511
					12540698747158523863050715693290963295227443043557
					66896648950445244523161731856403098711121722383113
					62229893423380308135336276614282806444486645238749
					30358907296290491560440772390713810515859307960866
					70172427121883998797908792274921901699720888093776
					65727333001053367881220235421809751254540594752243
					52584907711670556013604839586446706324415722155397
					53697817977846174064955149290862569321978468622482
					83972241375657056057490261407972968652414535100474
					82166370484403199890008895243450658541227588666881
					16427171479924442928230863465674813919123162824586
					17866458359124566529476545682848912883142607690042
					24219022671055626321111109370544217506941658960408
					07198403850962455444362981230987879927244284909188
					84580156166097919133875499200524063689912560717606
					05886116467109405077541002256983155200055935729725
					71636269561882670428252483600823257530420752963450

         * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
         * What is the value of this product?
		 */
		long maxProduct = 0L;
		String longNumber ="7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296865241453510047482166370484403199890008895243450658541227588666888116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

		// Creamos los segmentos de tamaño size
		for (int i = 0; i <= (longNumber.length() - size); i++) {
			// Almacenamos cada segmento en la variable segment
			String segment = longNumber.substring(i, i + size);
			// Creamos la variable que almacerá el producto de cada segmento
			long product = 1L;

			for (int j = 0; j < size; j++) {
				// Convertimos cada registro del segmento en long
				long digit = Long.parseLong(valueOf(segment.charAt(j)));

				// Multiplicamos cada dígito del segmento
				product *= digit;
			}

			if (product > maxProduct) {
				maxProduct = product;
			}
		}

		return maxProduct;
	}

}
